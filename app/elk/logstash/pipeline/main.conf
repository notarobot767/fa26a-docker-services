input {
  #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-syslog.html

  #udp {
  #  port => 5000
  #  type => "ubiquiti_syslog"
  #}

  #these file beats can send on same lan
  #do not need to publish ports
  beats {
    port => 6000
    type => "dns"
  }
  beats {
    port => 6001
    type => "tftp"
  }
  beats {
    port => 6002
    type => "freeradius"
  }
  beats {
    port => 6003
    type => "dhcp"
  }
}

filter {
  #DNS
  ##########################
  if [type] == "dns" {
    mutate { add_field => { "[@metadata][target_index]" => "dns-%{+YYYY.MM.dd}" } }

    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #dns queries log
      match => { "message" => "%{BINDTIMESTAMP:bind9_timestamp} %{WORD:category}: %{LOGLEVEL:log_level}: client %{NOTSPACE:client_id} %{IP:src_ip}#%{INT:src_port} \(%{USERNAME:domain}\): query: %{USERNAME:rm} %{NOTSPACE:query_class} %{WORD:record_type} %{NOTSPACE:query_flags} \(%{IP:dst_ip}\)" }
      
      #basic syslog
      match => { "message" => "%{BINDTIMESTAMP:bind9_timestamp} %{BINDCATEGORY:category}: %{LOGLEVEL:log_level}: %{GREEDYDATA:SYSLOG}" }

      #Else
      match => { "message" => "%{BINDTIMESTAMP:bind9_timestamp} %{GREEDYDATA:SYSLOG}" }
      
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]

      remove_field => ["rm", "IP", "IPV6", "IPV4", "CISCOMAC", "WINDOWSMAC", "COMMONMAC"]
    }
  }

  #tftp
  ##########################
  if [type] == "tftp" {
    mutate { add_field => { "[@metadata][target_index]" => "tftp-%{+YYYY.MM.dd}" } }

    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #file read/write
      match => { "message" => "%{SYSLOGTIMESTAMP:SYSLOGTIMESTAMP} tftp %{WORD:SOURCE}.%{LOGLEVEL:LOGLEVEL} in.tftpd\[%{NUMBER}\]: %{WORD:OP} from %{IP:SRC_IP} filename %{NOTSPACE:FILE}" }

      #Else
      match => { "message" => "%{SYSLOGTIMESTAMP:SYSLOGTIMESTAMP} tftp %{WORD:SOURCE}.%{LOGLEVEL:LOGLEVEL} %{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{SYSLOGTIMESTAMP} %{GREEDYDATA:SYSLOG}" }
      
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
  }
  
  #freeradius
  ##########################
  if [type] == "freeradius" {
    mutate { add_field => { "[@metadata][target_index]" => "freeradius-%{+YYYY.MM.dd}" } }

    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #radius syslog
      match => { "message" => "%{SYSLOG_YEAR:TIMESTAMP} : %{WORD:LEVEL}: \(%{NUMBER:AUTH_NUM}\) %{AUTH_MSG:AUTH_MSG}( \(%{AUTH_DESC:AUTH_DESC}\))?: \[%{WORD:USER}\] \(from client %{NOTSPACE:CLIENT} port %{NUMBER:PORT}\)%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{SYSLOG_YEAR:TIMESTAMP} : %{WORD:LEVEL}: %{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{SYSLOG_YEAR:TIMESTAMP} %{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{SYSLOGTIMESTAMP} %{GREEDYDATA:SYSLOG}" }

      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
  }

  #dhcp
  ##########################
  if [type] == "dhcp" {
    mutate { add_field => { "[@metadata][target_index]" => "dhcp-%{+YYYY.MM.dd}" } }

    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns"]

      #discover, offer, request, acck, reuse, all else
      match => { "message" => "%{BASE:rm}%{DHCP_DISC:rm}%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{BASE:rm}%{DHCP_OFF:rm}%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{BASE:rm}%{DHCP_REQ:rm}%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{BASE}%{DHCP_REQ_NO_SRV}%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{BASE:rm}%{DHCP_ACK:rm}%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{BASE:rm}%{GREEDYDATA:SYSLOG}" }
      match => { "message" => "%{SYSLOGTIMESTAMP} %{GREEDYDATA:SYSLOG}" }

      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]

      remove_field => ["rm", "IP", "IPV6", "IPV4", "COMMONMAC", "NUMBER"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elastic:9200"]
    index => "%{[@metadata][target_index]}"
  }
  stdout { codec => rubydebug }
}